import org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency

ext.configMarsPublish = {
    String module ->
        if (ext.has("Pangle")) {
            ARTIFACT_VERSION_MARS = ARTIFACT_VERSION_MARS + "-pangle"
        }
        buildscript {
            repositories {
                google()
                jcenter()
                maven {
                    url 'http://ttandroid.byted.org/repository/ttandroid/'
                }
            }
            dependencies {
                classpath "com.github.dcendents:android-maven-gradle-plugin:2.0"
                classpath 'com.bytedance.tools:publish_plugin:0.0.0.2-alpha.31'
            }
        }


        apply plugin: "maven-publish"
        publishing {
            repositories {
                mavenLocal()
                maven {
                    name "zeus"
                    url "https://artifact-maven.byted.org/repository/Volcengine/"
                    credentials {
                        username = "volcengine-temp"
                        password = "soic6hx#dsg@88v"
                    }
                }
                maven {
                    name "BuildRepo"
                    url "$buildDir/repo"
                }
            }
            publications {
                zeus(MavenPublication) {
                    version ARTIFACT_VERSION_MARS
                    artifactId ARTIFACT_NAME_MARS
                    groupId ARTIFACT_GROUP_MARS
                    artifact module == "zeus-core" ? "$buildDir/outputs/aar/zeus-core-release.aar" : "$buildDir/libs/zeus-plugin.jar"

                    pom.withXml {
                        def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')
                        // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                        configurations.implementation.allDependencies.each {
                            // Ensure dependencies such as fileTree are not included.
                            if (it.name != 'unspecified') {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                if (!(it instanceof DefaultProjectDependency)) {
                                    dependencyNode.appendNode('groupId', it.group)
                                    dependencyNode.appendNode('artifactId', it.name)
                                    dependencyNode.appendNode('version', it.version)
                                }
                            }
                        }
                    }
                }
            }
        }
        // 仅在发布到mars时执行该task
        tasks.create(name: "savePackageRecord", group: 'mars') {
            doLast {
                savePackageRecord(module)
            }
        }
        tasks.findByName("publishZeusPublicationToZeusRepository").dependsOn(module == "zeus-core" ? "assembleRelease" : "assemble")
        tasks.findByName("savePackageRecord").dependsOn("publishZeusPublicationToZeusRepository")
}

def savePackageRecord(module) {
    def outputDir = new File(getRootProject().getProjectDir().getParent(), "zeusRecords/${module}/")
    StringBuilder sb = new StringBuilder()
    def commitId = 'git rev-parse --short HEAD'.execute().text.trim()
    // save mapping
    def mapping = new File(getBuildDir(), "outputs/mapping/release/mapping.txt")
    if (mapping.exists()) {
        def output = new File(outputDir, "/mapping/${ARTIFACT_VERSION_MARS}_${commitId}.txt")
        def parentFile = output.parentFile
        if (!parentFile.exists()) {
            parentFile.mkdirs()
        }
        output << mapping.text
    }
    sb.append("${new Date().format("yyyy-MM-dd HH:mm:ss ")} ${commitId} ${ARTIFACT_VERSION_MARS} ${mapping.exists() ? '' : '未混淆'}\n")
    new File(outputDir, "versions.txt").append(sb.toString())
}
